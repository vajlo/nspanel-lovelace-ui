{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 If you like this project consider buying me a pizza \ud83c\udf55 NsPanel Lovelace UI is a Firmware for the nextion screen inside of NSPanel in the Design of HomeAssistant 's Lovelace UI Design. EU Model and US Model supported (in portrait and landscape orientation) Content of the screen is controlled by a AppDaemon Python Script installed on your HomeAssistant Instance. Or an TypeScript on your ioBroker Instance in case you are an ioBroker User. NsPanel needs to be flashed with Tasmota (or upcoming with ESPHome) Features \u00b6 Entities Page Grid Page Detail Pages for Lights (Brightness, Temperature and Color of the Light) and for Covers (Position) Thermostat Page Media Player Card Alarm Control Card Screensaver Page with Time, Date and Weather Information Card with QrCode to display WiFi Information Localization (currently 40 languages) Everything is dynamically configurable by a yaml config, no need to code or touch Nextion Editor It works with Tasmota and MQTT. To control the panel and update it with content from HomeAssistant there is an AppDaemon App. See the following picture to get an idea of the look of this firmware for NSPanel. Some (not all) screenshots from the US Portrait Version: Requirements \u00b6 NSPanel USB to Serial TTL Adapter Running Instance of the Home Automation Platform of your Choise Running Home Assistant Instance with installed MQTT Broker Running ioBroker Instance with installed MQTT Broker","title":"Overview"},{"location":"#overview","text":"If you like this project consider buying me a pizza \ud83c\udf55 NsPanel Lovelace UI is a Firmware for the nextion screen inside of NSPanel in the Design of HomeAssistant 's Lovelace UI Design. EU Model and US Model supported (in portrait and landscape orientation) Content of the screen is controlled by a AppDaemon Python Script installed on your HomeAssistant Instance. Or an TypeScript on your ioBroker Instance in case you are an ioBroker User. NsPanel needs to be flashed with Tasmota (or upcoming with ESPHome)","title":"Overview"},{"location":"#features","text":"Entities Page Grid Page Detail Pages for Lights (Brightness, Temperature and Color of the Light) and for Covers (Position) Thermostat Page Media Player Card Alarm Control Card Screensaver Page with Time, Date and Weather Information Card with QrCode to display WiFi Information Localization (currently 40 languages) Everything is dynamically configurable by a yaml config, no need to code or touch Nextion Editor It works with Tasmota and MQTT. To control the panel and update it with content from HomeAssistant there is an AppDaemon App. See the following picture to get an idea of the look of this firmware for NSPanel. Some (not all) screenshots from the US Portrait Version:","title":"Features"},{"location":"#requirements","text":"NSPanel USB to Serial TTL Adapter Running Instance of the Home Automation Platform of your Choise Running Home Assistant Instance with installed MQTT Broker Running ioBroker Instance with installed MQTT Broker","title":"Requirements"},{"location":"card-alarm/","text":"Alarm Card \u00b6 cards : - type : cardAlarm title : Alarm Test 1 entity : alarm_control_panel.alarmo List of supported config keys of this card: key optional type default description type False string None Used by navigate items title True string None Title of the Page entity False string None contains the entity of the current card key True string None Used by navigate items alarmControl True complex None overwrites the action executed on pressing the left bottom icon, by default this button is used to show a list of open sensors on a failed attempt to arm.","title":"Alarm Card"},{"location":"card-alarm/#alarm-card","text":"cards : - type : cardAlarm title : Alarm Test 1 entity : alarm_control_panel.alarmo List of supported config keys of this card: key optional type default description type False string None Used by navigate items title True string None Title of the Page entity False string None contains the entity of the current card key True string None Used by navigate items alarmControl True complex None overwrites the action executed on pressing the left bottom icon, by default this button is used to show a list of open sensors on a failed attempt to arm.","title":"Alarm Card"},{"location":"card-climate/","text":"Climate/Thermo Card \u00b6 cards : - type : cardThermo title : HeatPump entity : climate.heatpump - type : cardThermo title : HvaC entity : climate.hvac - type : cardThermo title : ecobee entity : climate.ecobee List of supported config keys of this card: key optional type default description type False string None Type of the card entities False complex None contains a list of entities of this card title True string None Title of the Page temperatureUnit True string celsius set this to fahrenheit to change the temperatureUnit on the page key True string None Used by navigate items in combination with the type (cardEntities_key)","title":"Climate/Thermo Card"},{"location":"card-climate/#climatethermo-card","text":"cards : - type : cardThermo title : HeatPump entity : climate.heatpump - type : cardThermo title : HvaC entity : climate.hvac - type : cardThermo title : ecobee entity : climate.ecobee List of supported config keys of this card: key optional type default description type False string None Type of the card entities False complex None contains a list of entities of this card title True string None Title of the Page temperatureUnit True string celsius set this to fahrenheit to change the temperatureUnit on the page key True string None Used by navigate items in combination with the type (cardEntities_key)","title":"Climate/Thermo Card"},{"location":"card-entities/","text":"Entities Page \u00b6 cards : - type : cardEntities title : Test Entities Card entities : - entity : light.bed_light - entity : switch.decorative_lights - entity : cover.hall_window - entity : sensor.outside_temperature List of supported config keys of this card: key optional type default description type False string None Type of the card entities False complex None contains a list of entities of this card title True string None Title of the Page key True string None Used by navigate items in combination with the type (cardEntities_key) List of supported entitiy types for this page: cover switch input_boolean binary_sensor sensor button number input_number scenes script input_button light input_text (read-only) input_select lock fan automation iText","title":"Entities Card"},{"location":"card-entities/#entities-page","text":"cards : - type : cardEntities title : Test Entities Card entities : - entity : light.bed_light - entity : switch.decorative_lights - entity : cover.hall_window - entity : sensor.outside_temperature List of supported config keys of this card: key optional type default description type False string None Type of the card entities False complex None contains a list of entities of this card title True string None Title of the Page key True string None Used by navigate items in combination with the type (cardEntities_key) List of supported entitiy types for this page: cover switch input_boolean binary_sensor sensor button number input_number scenes script input_button light input_text (read-only) input_select lock fan automation iText","title":"Entities Page"},{"location":"card-grid/","text":"Grid Page \u00b6 cards : - type : cardGrid title : Test Grid Card entities : - entity : light.bed_light - entity : switch.decorative_lights - entity : sensor.outside_temperature name : Outside Temp - entity : sensor.carbon_monoxide - entity : light.entrance_color_white_lights name : Entrance - entity : light.office_rgbw_lights name : Office RGBW icon : mdi:office-building List of supported config keys of this card: key optional type default description type False string None Type of the card entities False complex None contains a list of entities of this card title True string None Title of the Page key True string None Used by navigate items in combination with the type (cardEntities_key) List of supported entitiy types for this page: cover switch input_boolean binary_sensor sensor button number input_number scenes script input_button light input_text (read-only) input_select lock fan automation iText","title":"Grid Card"},{"location":"card-grid/#grid-page","text":"cards : - type : cardGrid title : Test Grid Card entities : - entity : light.bed_light - entity : switch.decorative_lights - entity : sensor.outside_temperature name : Outside Temp - entity : sensor.carbon_monoxide - entity : light.entrance_color_white_lights name : Entrance - entity : light.office_rgbw_lights name : Office RGBW icon : mdi:office-building List of supported config keys of this card: key optional type default description type False string None Type of the card entities False complex None contains a list of entities of this card title True string None Title of the Page key True string None Used by navigate items in combination with the type (cardEntities_key) List of supported entitiy types for this page: cover switch input_boolean binary_sensor sensor button number input_number scenes script input_button light input_text (read-only) input_select lock fan automation iText","title":"Grid Page"},{"location":"card-media/","text":"Media Card \u00b6 cards : - type : cardMedia entity : media_player.spotify List of supported config keys of this card: key optional type default description type False string None Used by navigate items title True string None Title of the Page entity False string None contains the entity of the current card key True string None Used by navigate items mediaControl True complex None overwrites the action executed on pressing the left upper icon (red circle), icon is showing the current type of media and cannot be changed","title":"Media Card"},{"location":"card-media/#media-card","text":"cards : - type : cardMedia entity : media_player.spotify List of supported config keys of this card: key optional type default description type False string None Used by navigate items title True string None Title of the Page entity False string None contains the entity of the current card key True string None Used by navigate items mediaControl True complex None overwrites the action executed on pressing the left upper icon (red circle), icon is showing the current type of media and cannot be changed","title":"Media Card"},{"location":"card-qr/","text":"WiFi / QR Card \u00b6 cards : - type : cardQR title : Guest Wifi qrCode : \"WIFI:S:test_ssid;T:WPA;P:test_pw;;\" entities : - entity : iText.test_ssid name : Name icon : mdi:wifi - entity : iText.test_pw name : Password icon : mdi:key List of supported config keys of this card: key optional type default description type False string None Used by navigate items entities False complex None contains entities of the card, only valid on cardEntities and cardGrid and cardQR title True string None Title of the Page key True string None Used by navigate items qrCode False string None Value of the qrCode List of supported entitiy types for this page: switch input_boolean binary_sensor sensor button scenes script input_button input_select light input_text (read-only) lock automation The qrCode value is evaluated as a homeassistant Template, so it is possible to get values from HomeAssistant within the qrCode. \"WIFI:S:{{states('input_text.test_ssid')}};T:WPA;P:{{states('input_text.test_pw')}};;\"","title":"Wifi/QR Card"},{"location":"card-qr/#wifi-qr-card","text":"cards : - type : cardQR title : Guest Wifi qrCode : \"WIFI:S:test_ssid;T:WPA;P:test_pw;;\" entities : - entity : iText.test_ssid name : Name icon : mdi:wifi - entity : iText.test_pw name : Password icon : mdi:key List of supported config keys of this card: key optional type default description type False string None Used by navigate items entities False complex None contains entities of the card, only valid on cardEntities and cardGrid and cardQR title True string None Title of the Page key True string None Used by navigate items qrCode False string None Value of the qrCode List of supported entitiy types for this page: switch input_boolean binary_sensor sensor button scenes script input_button input_select light input_text (read-only) lock automation The qrCode value is evaluated as a homeassistant Template, so it is possible to get values from HomeAssistant within the qrCode. \"WIFI:S:{{states('input_text.test_ssid')}};T:WPA;P:{{states('input_text.test_pw')}};;\"","title":"WiFi / QR Card"},{"location":"config-overview/","text":"Configuration \u00b6 To confiure your NSPanel to your needs, you need to edit the apps.yaml inside of your Appdaemon config folder and add card and entities you want to display on the screen. If you've sucessfully set up mqtt, you should already have a configuration looking like this: --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/tasmota_your_mqtt_topic/RESULT\" panelSendTopic : \"cmnd/tasmota_your_mqtt_topic/CustomSend\" You can continue from this point adding configuration for the weather forcecast on the screensaver, configuring a schedule for the brightness of the screensaver and your first cards. --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/tasmota_your_mqtt_topic/RESULT\" panelSendTopic : \"cmnd/tasmota_your_mqtt_topic/CustomSend\" sleepTimeout : 20 sleepBrightness : - time : \"7:00:00\" value : 10 - time : \"23:00:00\" value : 0 locale : \"de_DE\" screensaver : entity : weather.k3ll3r cards : - type : cardEntities entities : - entity : switch.example_item - entity : light.example_item title : Example 1 - type : cardGrid entities : - entity : switch.example_item - entity : light.example_item title : Example 2 This is the full list of configuration options supported for the config key: key optional type default description panelRecvTopic False string tele/tasmota_your_mqtt_topic/RESULT The mqtt topic used to receive messages. panelSendTopic False string cmnd/tasmota_your_mqtt_topic/CustomSend The mqtt topic used to send messages. updateMode True string auto-notify Update Mode for flashing of the nextion display firmware, by default it is showing a message asking for the update after updating the backend app in HACS; Possible values: \"auto\", \"auto-notify\", \"manual\" model True string eu Model; Possible values: \"eu\", \"us-l\" and \"us-p\" sleepTimeout True integer 20 Timeout for the screen to enter screensaver, to disable screensaver use 0 sleepBrightness True integer/complex 20 Brightness for the screen on the screensaver, see example below for complex/scheduled config. screenBrightness True integer/complex 100 Brightness for the screen during usage, config format is the same as sleepBrightness. sleepTracking True string None Forces screensaver brightness to 0 in case entity state is not_home or off, can be a group, person or device_tracker entity. sleepTrackingZones True list [\"not_home\", \"off\"] Allows you to set your own states for sleepTracking sleepOverride True complex None Allows overriding of the sleepBrightness if entity state is on, true or home. Overrides sleepBrightness but sleepTracking takes precedence. locale True string en_US Used by babel to determinante Date format on screensaver, also used for localization. dateFormatBabel True string full formatting options on https://babel.pocoo.org/en/latest/dates.html?highlight=name%20of%20day#date-fields timeFormat True string %H:%M Time Format on screensaver. Substring after ? is displayed in a seperate smaller textbox. Useful for 12h time format with AM/PM \"%I:%M ?%p\" dateAdditionalTemplate True string \"\" Addional Text dispayed after Date, can contain a Homeassistant Template Example \" - {{ states('sun.sun') }}\" timeAdditionalTemplate True string \"\" Addional Text dispayed below Time, can contain a Homeassistant Template dateFormat True string %A, %d. %B %Y date format used if babel is not installed defaultBackgroundColor True string ha-dark backgroud color of all cards, valid values: black , ha-dark cards False complex configuration for cards that are displayed on panel; see docs for cards screensaver True complex configuration for screensaver; see docs for screensaver hiddenCards True complex configuration for cards that can be accessed though navigate items; see docs for cards Details on sleepBrightness/screenBrightness and other configs related to screen brightness \u00b6 It is possible to schedule a brightness change for the screen at specific times. sleepBrightness : - time : \"7:00:00\" value : 10 - time : \"23:00:00\" value : 0 sleepBrightness : - time : \"sunrise\" value : 10 - time : \"sunset + 1:00:00\" value : 0 It is also possible to use a static value or an input_number/sensor with the range between 0 and 100 as value for sleepBrightness/screenBrightness: sleepBrightness: input_number.brightness_nspanel sleepBrightness: 50 The config option sleepTracking overrides this setting and sets the brightness to 0 if the state of the configured Home Assistant entity is off or not_home . You may also use a Home Assistant group to track multiple entities. The config option sleepOverride overrides sleepBrightness but does not take precedence over sleepTracking. This is useful if, for example, you want your NSPanel to be brighter than usual if your light is on or if you want to override a panel dimming if you are in the room. The following example configuration is turning off the screen after sunset, but in case the bedroom light is on the NSPanel brightness will be 20 instead of 0. sleepBrightness : - time : \"sunrise\" value : 20 - time : \"sunset\" value : 0 sleepOverride : entity : light.bedroomlight brightness : 20 Supported keys for locale config \u00b6 Language Code Language af_ZA Afrikaans ar_SY Arabic bg_BG Bulgarian ca_ES Catalan cs_CZ Czech da_DK Danish de_DE German el_GR Greek en_US English es_ES Spanish et_EE Estonian fa_IR Persian fi_FI Finnish fr_FR French he_IL Hebrew hr_xx Croatian hu_HU Hungarian hy_AM Armenian id_ID Indonesian is_IS Icelandic it_IT Italian lb_xx Luxembourgish lt_LT Lithuanian lv_LV Latvian nb_NO Norwegian nl_NL Dutch nn_NO Norwegian pl_PL Polish pt_PT Portuguese ro_RO Romanian ru_RU Russian sk_SK Slovak sl_SI Slovenian sv_SE Swedish th_TH Thai tr_TR Turkish uk_UA Ukrainian vi_VN Vietnamese zh_CN Simplified Chinese zh_TW Traditional Chinese","title":"Overview"},{"location":"config-overview/#configuration","text":"To confiure your NSPanel to your needs, you need to edit the apps.yaml inside of your Appdaemon config folder and add card and entities you want to display on the screen. If you've sucessfully set up mqtt, you should already have a configuration looking like this: --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/tasmota_your_mqtt_topic/RESULT\" panelSendTopic : \"cmnd/tasmota_your_mqtt_topic/CustomSend\" You can continue from this point adding configuration for the weather forcecast on the screensaver, configuring a schedule for the brightness of the screensaver and your first cards. --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/tasmota_your_mqtt_topic/RESULT\" panelSendTopic : \"cmnd/tasmota_your_mqtt_topic/CustomSend\" sleepTimeout : 20 sleepBrightness : - time : \"7:00:00\" value : 10 - time : \"23:00:00\" value : 0 locale : \"de_DE\" screensaver : entity : weather.k3ll3r cards : - type : cardEntities entities : - entity : switch.example_item - entity : light.example_item title : Example 1 - type : cardGrid entities : - entity : switch.example_item - entity : light.example_item title : Example 2 This is the full list of configuration options supported for the config key: key optional type default description panelRecvTopic False string tele/tasmota_your_mqtt_topic/RESULT The mqtt topic used to receive messages. panelSendTopic False string cmnd/tasmota_your_mqtt_topic/CustomSend The mqtt topic used to send messages. updateMode True string auto-notify Update Mode for flashing of the nextion display firmware, by default it is showing a message asking for the update after updating the backend app in HACS; Possible values: \"auto\", \"auto-notify\", \"manual\" model True string eu Model; Possible values: \"eu\", \"us-l\" and \"us-p\" sleepTimeout True integer 20 Timeout for the screen to enter screensaver, to disable screensaver use 0 sleepBrightness True integer/complex 20 Brightness for the screen on the screensaver, see example below for complex/scheduled config. screenBrightness True integer/complex 100 Brightness for the screen during usage, config format is the same as sleepBrightness. sleepTracking True string None Forces screensaver brightness to 0 in case entity state is not_home or off, can be a group, person or device_tracker entity. sleepTrackingZones True list [\"not_home\", \"off\"] Allows you to set your own states for sleepTracking sleepOverride True complex None Allows overriding of the sleepBrightness if entity state is on, true or home. Overrides sleepBrightness but sleepTracking takes precedence. locale True string en_US Used by babel to determinante Date format on screensaver, also used for localization. dateFormatBabel True string full formatting options on https://babel.pocoo.org/en/latest/dates.html?highlight=name%20of%20day#date-fields timeFormat True string %H:%M Time Format on screensaver. Substring after ? is displayed in a seperate smaller textbox. Useful for 12h time format with AM/PM \"%I:%M ?%p\" dateAdditionalTemplate True string \"\" Addional Text dispayed after Date, can contain a Homeassistant Template Example \" - {{ states('sun.sun') }}\" timeAdditionalTemplate True string \"\" Addional Text dispayed below Time, can contain a Homeassistant Template dateFormat True string %A, %d. %B %Y date format used if babel is not installed defaultBackgroundColor True string ha-dark backgroud color of all cards, valid values: black , ha-dark cards False complex configuration for cards that are displayed on panel; see docs for cards screensaver True complex configuration for screensaver; see docs for screensaver hiddenCards True complex configuration for cards that can be accessed though navigate items; see docs for cards","title":"Configuration"},{"location":"config-overview/#details-on-sleepbrightnessscreenbrightness-and-other-configs-related-to-screen-brightness","text":"It is possible to schedule a brightness change for the screen at specific times. sleepBrightness : - time : \"7:00:00\" value : 10 - time : \"23:00:00\" value : 0 sleepBrightness : - time : \"sunrise\" value : 10 - time : \"sunset + 1:00:00\" value : 0 It is also possible to use a static value or an input_number/sensor with the range between 0 and 100 as value for sleepBrightness/screenBrightness: sleepBrightness: input_number.brightness_nspanel sleepBrightness: 50 The config option sleepTracking overrides this setting and sets the brightness to 0 if the state of the configured Home Assistant entity is off or not_home . You may also use a Home Assistant group to track multiple entities. The config option sleepOverride overrides sleepBrightness but does not take precedence over sleepTracking. This is useful if, for example, you want your NSPanel to be brighter than usual if your light is on or if you want to override a panel dimming if you are in the room. The following example configuration is turning off the screen after sunset, but in case the bedroom light is on the NSPanel brightness will be 20 instead of 0. sleepBrightness : - time : \"sunrise\" value : 20 - time : \"sunset\" value : 0 sleepOverride : entity : light.bedroomlight brightness : 20","title":"Details on sleepBrightness/screenBrightness and other configs related to screen brightness"},{"location":"config-overview/#supported-keys-for-locale-config","text":"Language Code Language af_ZA Afrikaans ar_SY Arabic bg_BG Bulgarian ca_ES Catalan cs_CZ Czech da_DK Danish de_DE German el_GR Greek en_US English es_ES Spanish et_EE Estonian fa_IR Persian fi_FI Finnish fr_FR French he_IL Hebrew hr_xx Croatian hu_HU Hungarian hy_AM Armenian id_ID Indonesian is_IS Icelandic it_IT Italian lb_xx Luxembourgish lt_LT Lithuanian lv_LV Latvian nb_NO Norwegian nl_NL Dutch nn_NO Norwegian pl_PL Polish pt_PT Portuguese ro_RO Romanian ru_RU Russian sk_SK Slovak sl_SI Slovenian sv_SE Swedish th_TH Thai tr_TR Turkish uk_UA Ukrainian vi_VN Vietnamese zh_CN Simplified Chinese zh_TW Traditional Chinese","title":"Supported keys for locale config"},{"location":"config-screensaver/","text":"Possible configuration values for screensaver config \u00b6 key optional type default description entity True string weather.example weather entity from homeassistant weatherUnit True string celsius unit for temperature, valid values are celsius or fahrenheit weatherOverrideForecast1 True complex None sensor entity from home assistant here to overwrite the first weather forecast item on the screensaver weatherOverrideForecast2 True complex None sensor entity from home assistant here to overwrite the second weather forecast item on the screensaver weatherOverrideForecast3 True complex None sensor entity from home assistant here to overwrite the third weather forecast item on the screensaver weatherOverrideForecast4 True complex None sensor entity from home assistant here to overwrite the forth weather forecast item on the screensaver statusIcon1 True complex None status icon left to the date string, config similar to weatherOverride statusIcon2 True complex None status icon right to the date string, config similar to weatherOverride doubleTapToUnlock True boolean False requires to tap screensaver two times alternativeLayout True boolean False alternative layout with humidity theme True complex configuration for theme defaultCard True string None default page after exiting screensaver; only works with top level cards defined in cards; needs to be a navigation item, see subpages (navigate.type_key) This config option will also be evaluated as a HomeAssistant Template. key True string None Used by navigate items Example for the weatherOverride config options: weatherOverrideForecast4 : entity : sensor.example_item name : name icon : mdi:lightbulb Possible configuration values for screensaver theme config \u00b6 key option type default description background True list Black [R, G, B] time True list White [R, G, B] timeAMPM True list White [R, G, B] date True list White [R, G, B] tMainIcon True list White [R, G, B] tMainText True list White [R, G, B] tForecast1 True list White [R, G, B] tForecast2 True list White [R, G, B] tForecast3 True list White [R, G, B] tForecast4 True list White [R, G, B] tF1Icon True list White [R, G, B] tF2Icon True list White [R, G, B] tF3Icon True list White [R, G, B] tF4Icon True list White [R, G, B] tForecast1Val True list White [R, G, B] tForecast2Val True list White [R, G, B] tForecast3Val True list White [R, G, B] tForecast4Val True list White [R, G, B] bar True list White [R, G, B] tMainIconAlt True list White [R, G, B] tMainTextAlt True list White [R, G, B] tMRIcon True list White [R, G, B] tMR True list White [R, G, B] autoWeather True boolean false Set to true to enable weather icons to change depending on state e.g. blue for rainy. Any custom colors in tMainIcon tF1Icon tF2Icon tF3Icon tF4Icon take precedence. If autoWeather: true is set. You may also overwrite the default color mapping for any valid weather state provided by homeassistant e.g. rainy: [50, 50, 255] or sunny: [255, 255, 0] Specify colours as red green and blue values from 0-255 e.g. [255, 0, 0] for red or [0, 0, 255] for blue. These are translated internally to RGB565 (note that this has lower color depth so the colours may not appear the same). Also note that the screen has a low contrast ratio, so colors look sigificantly different at full display brightness and lowest brightness. Example for the theme config: screensaver : theme : autoWeather : true Config Example for configured weatherOverrides config: screensaver: entity: weather.k3ll3r weatherOverrideForecast4: entity: sensor.example_item name: name icon: lightbulb alternativeLayout: True Config Example for configured statusIcons config: screensaver: entity: weather.k3ll3r statusIcon1: entity: switch.example_item statusIcon2: entity: binary_sensor.example_item Config Example for configured theme (colored weather icons) config: screensaver: entity: weather.k3ll3r theme: autoWeather: true Config Example for configured theme (custom) config: screensaver: entity: weather.k3ll3r screensaver: entity: weather.k3ll3r theme: #time: [220, 0, 255] #timeAMPM: [220, 0, 255] #date: [220, 0, 255] #tMainIcon: [220, 0, 255] #tMainText: [220, 0, 255] #tForecast1: [220, 0, 255] #tForecast2: [220, 0, 255] #tForecast3: [220, 0, 255] #tForecast4: [220, 0, 255] #tF1Icon: [220, 0, 255] #tF2Icon: [220, 0, 255] #tF3Icon: [220, 0, 255] #tF4Icon: [220, 0, 255] #tForecast1Val: [220, 0, 255] #tForecast2Val: [220, 0, 255] #tForecast3Val: [220, 0, 255] #tForecast4Val: [220, 0, 255] #bar: [220, 0, 255] #tMRIcon: [220, 0, 255] #tMR: [220, 0, 255] #tTimeAdd: [220, 0, 255] #autoWeather automatically colors the screensaver weather icons based upon weather. Uncomment the following line to enable. #autoWeather: true #If you have enabled autoWeather, the following options allow you to customise the colors used for autoWeather. #clear-night: [150, 150, 100] #cloudy: [75, 75, 75] #exceptional: [255, 50, 50] #fog: [150, 150, 150] #hail: [200, 200, 200] #lightning: [200, 200, 0] #lightning-rainy: [200, 200, 150] #partlycloudy: [150, 150, 150] #pouring: [50, 50, 255] #rainy: [100, 100, 255] #snowy: [150, 150, 150] #snowy-rainy: [150, 150, 255] #sunny: [255, 255, 0] #windy: [150, 150, 150] #windy-variant: [255, 125, 125]","title":"Screensaver"},{"location":"config-screensaver/#possible-configuration-values-for-screensaver-config","text":"key optional type default description entity True string weather.example weather entity from homeassistant weatherUnit True string celsius unit for temperature, valid values are celsius or fahrenheit weatherOverrideForecast1 True complex None sensor entity from home assistant here to overwrite the first weather forecast item on the screensaver weatherOverrideForecast2 True complex None sensor entity from home assistant here to overwrite the second weather forecast item on the screensaver weatherOverrideForecast3 True complex None sensor entity from home assistant here to overwrite the third weather forecast item on the screensaver weatherOverrideForecast4 True complex None sensor entity from home assistant here to overwrite the forth weather forecast item on the screensaver statusIcon1 True complex None status icon left to the date string, config similar to weatherOverride statusIcon2 True complex None status icon right to the date string, config similar to weatherOverride doubleTapToUnlock True boolean False requires to tap screensaver two times alternativeLayout True boolean False alternative layout with humidity theme True complex configuration for theme defaultCard True string None default page after exiting screensaver; only works with top level cards defined in cards; needs to be a navigation item, see subpages (navigate.type_key) This config option will also be evaluated as a HomeAssistant Template. key True string None Used by navigate items Example for the weatherOverride config options: weatherOverrideForecast4 : entity : sensor.example_item name : name icon : mdi:lightbulb","title":"Possible configuration values for screensaver config"},{"location":"config-screensaver/#possible-configuration-values-for-screensaver-theme-config","text":"key option type default description background True list Black [R, G, B] time True list White [R, G, B] timeAMPM True list White [R, G, B] date True list White [R, G, B] tMainIcon True list White [R, G, B] tMainText True list White [R, G, B] tForecast1 True list White [R, G, B] tForecast2 True list White [R, G, B] tForecast3 True list White [R, G, B] tForecast4 True list White [R, G, B] tF1Icon True list White [R, G, B] tF2Icon True list White [R, G, B] tF3Icon True list White [R, G, B] tF4Icon True list White [R, G, B] tForecast1Val True list White [R, G, B] tForecast2Val True list White [R, G, B] tForecast3Val True list White [R, G, B] tForecast4Val True list White [R, G, B] bar True list White [R, G, B] tMainIconAlt True list White [R, G, B] tMainTextAlt True list White [R, G, B] tMRIcon True list White [R, G, B] tMR True list White [R, G, B] autoWeather True boolean false Set to true to enable weather icons to change depending on state e.g. blue for rainy. Any custom colors in tMainIcon tF1Icon tF2Icon tF3Icon tF4Icon take precedence. If autoWeather: true is set. You may also overwrite the default color mapping for any valid weather state provided by homeassistant e.g. rainy: [50, 50, 255] or sunny: [255, 255, 0] Specify colours as red green and blue values from 0-255 e.g. [255, 0, 0] for red or [0, 0, 255] for blue. These are translated internally to RGB565 (note that this has lower color depth so the colours may not appear the same). Also note that the screen has a low contrast ratio, so colors look sigificantly different at full display brightness and lowest brightness. Example for the theme config: screensaver : theme : autoWeather : true Config Example for configured weatherOverrides config: screensaver: entity: weather.k3ll3r weatherOverrideForecast4: entity: sensor.example_item name: name icon: lightbulb alternativeLayout: True Config Example for configured statusIcons config: screensaver: entity: weather.k3ll3r statusIcon1: entity: switch.example_item statusIcon2: entity: binary_sensor.example_item Config Example for configured theme (colored weather icons) config: screensaver: entity: weather.k3ll3r theme: autoWeather: true Config Example for configured theme (custom) config: screensaver: entity: weather.k3ll3r screensaver: entity: weather.k3ll3r theme: #time: [220, 0, 255] #timeAMPM: [220, 0, 255] #date: [220, 0, 255] #tMainIcon: [220, 0, 255] #tMainText: [220, 0, 255] #tForecast1: [220, 0, 255] #tForecast2: [220, 0, 255] #tForecast3: [220, 0, 255] #tForecast4: [220, 0, 255] #tF1Icon: [220, 0, 255] #tF2Icon: [220, 0, 255] #tF3Icon: [220, 0, 255] #tF4Icon: [220, 0, 255] #tForecast1Val: [220, 0, 255] #tForecast2Val: [220, 0, 255] #tForecast3Val: [220, 0, 255] #tForecast4Val: [220, 0, 255] #bar: [220, 0, 255] #tMRIcon: [220, 0, 255] #tMR: [220, 0, 255] #tTimeAdd: [220, 0, 255] #autoWeather automatically colors the screensaver weather icons based upon weather. Uncomment the following line to enable. #autoWeather: true #If you have enabled autoWeather, the following options allow you to customise the colors used for autoWeather. #clear-night: [150, 150, 100] #cloudy: [75, 75, 75] #exceptional: [255, 50, 50] #fog: [150, 150, 150] #hail: [200, 200, 200] #lightning: [200, 200, 0] #lightning-rainy: [200, 200, 150] #partlycloudy: [150, 150, 150] #pouring: [50, 50, 255] #rainy: [100, 100, 255] #snowy: [150, 150, 150] #snowy-rainy: [150, 150, 255] #sunny: [255, 255, 0] #windy: [150, 150, 150] #windy-variant: [255, 125, 125]","title":"Possible configuration values for screensaver theme config"},{"location":"configure_mqtt/","text":"Configure MQTT on Tasmota \u00b6 Configure your MQTT Server in Tasmota. See Tasmota MQTT Documentation for more details. Please leave the Full Topic as it is in default configuration (and on the screenshot). Change the topic to something unique for your panel, you will need this topic later in the configuration of your panel in appdaemon / apps.yaml Configure MQTT Connection on AppDaemon \u00b6 For the app to work you need a working MQTT Configuration in AppDaemon. Please add the configuration of your mqtt server, user and password to your existing appdaemon.yaml Restart your AppDaemon Container (not HomeAssistant) after adding the MQTT Configuration. You will find this file in the following location: config/appdaemon/appdeamon.yaml --- secrets : /config/secrets.yaml appdaemon : latitude : 52.0 longitude : 4.0 elevation : 2 time_zone : Europe/Berlin plugins : HASS : type : hass MQTT : type : mqtt namespace : mqtt client_id : \"appdaemon\" client_host : 192.168.75.30 client_port : 1883 client_user : \"mqttuser\" client_password : \"mqttpassword\" client_topics : NONE http : url : http://127.0.0.1:5050 admin : api : hadashboard : Configure NsPanel on AppDaemon \u00b6 Please add the following minimal configuration to your apps.yaml, which is located in config/appdaemon/apps/apps.yaml --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/tasmota_your_mqtt_topic/RESULT\" panelSendTopic : \"cmnd/tasmota_your_mqtt_topic/CustomSend\" Please adjust tasmota_your_mqtt_topic to the topic used in Tasmota MQTT Configuration. If your configuration is correct you should get the following screens on your panel: Note: You can add multiple panels to this configuration: --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/first-nspanel-topic/RESULT\" panelSendTopic : \"cmnd/first-nspanel-topic/CustomSend\" nspanel-2 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/second-nspanel-topic/RESULT\" panelSendTopic : \"cmnd/second-nspanel-topic/CustomSend\"","title":"Configure MQTT"},{"location":"configure_mqtt/#configure-mqtt-on-tasmota","text":"Configure your MQTT Server in Tasmota. See Tasmota MQTT Documentation for more details. Please leave the Full Topic as it is in default configuration (and on the screenshot). Change the topic to something unique for your panel, you will need this topic later in the configuration of your panel in appdaemon / apps.yaml","title":"Configure MQTT on Tasmota"},{"location":"configure_mqtt/#configure-mqtt-connection-on-appdaemon","text":"For the app to work you need a working MQTT Configuration in AppDaemon. Please add the configuration of your mqtt server, user and password to your existing appdaemon.yaml Restart your AppDaemon Container (not HomeAssistant) after adding the MQTT Configuration. You will find this file in the following location: config/appdaemon/appdeamon.yaml --- secrets : /config/secrets.yaml appdaemon : latitude : 52.0 longitude : 4.0 elevation : 2 time_zone : Europe/Berlin plugins : HASS : type : hass MQTT : type : mqtt namespace : mqtt client_id : \"appdaemon\" client_host : 192.168.75.30 client_port : 1883 client_user : \"mqttuser\" client_password : \"mqttpassword\" client_topics : NONE http : url : http://127.0.0.1:5050 admin : api : hadashboard :","title":"Configure MQTT Connection on AppDaemon"},{"location":"configure_mqtt/#configure-nspanel-on-appdaemon","text":"Please add the following minimal configuration to your apps.yaml, which is located in config/appdaemon/apps/apps.yaml --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/tasmota_your_mqtt_topic/RESULT\" panelSendTopic : \"cmnd/tasmota_your_mqtt_topic/CustomSend\" Please adjust tasmota_your_mqtt_topic to the topic used in Tasmota MQTT Configuration. If your configuration is correct you should get the following screens on your panel: Note: You can add multiple panels to this configuration: --- nspanel-1 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/first-nspanel-topic/RESULT\" panelSendTopic : \"cmnd/first-nspanel-topic/CustomSend\" nspanel-2 : module : nspanel-lovelace-ui class : NsPanelLovelaceUIManager config : panelRecvTopic : \"tele/second-nspanel-topic/RESULT\" panelSendTopic : \"cmnd/second-nspanel-topic/CustomSend\"","title":"Configure NsPanel on AppDaemon"},{"location":"entities/","text":"Entities \u00b6 Entities are mainly used on cardEntities, cardGrid and cardGrid. It is possible to overwrite and configure varrious things on Entities. Possible configuration values for entities key: \u00b6 key optional type default description entity False string None name of ha entity name True string None Used to override names icon True string None Used to override icons color True array None Overwrite color of entity color: [255, 0, 0] state True string None Only displayed if Entity state is equal to this value state_not True string None Only displayed if Entity state is unequal to this value status True string None Only valid for navigate items, adds a entity to track state for the icon Override Icons or Names \u00b6 To overwrite Icons or Names of entities you can configure an icon and/or name in your configuration, please see the following example. Only the icons listed in the Icon Cheatsheet are useable. entities : - entity : light.test_item name : NameOverride icon : mdi:lightbulb It is also possible to configure different icon overwrites per state: icon : \"on\" : mdi:lightbulb \"off\" : mdi:lightbulb It is also possible to configure different color overwrites per state: color : \"on\" : [ 255 , 0 , 0 ] \"off\" : [ 0 , 0 , 255 ] It is also possible to use text instead of icons with text:X icon : \"on\" : mdi:lightbulb \"off\" : \"text:\" Hide item based on state \u00b6 This sensor will only be shown on the card if it's state is equal to off - entity : binary_sensor.sensor_bad_contact state : \"off\" This sensor will only be shown on the card if it's state is not equal to on - entity : binary_sensor.sensor_kueche_contact state_not : \"on\"","title":"Special Settings for Entities"},{"location":"entities/#entities","text":"Entities are mainly used on cardEntities, cardGrid and cardGrid. It is possible to overwrite and configure varrious things on Entities.","title":"Entities"},{"location":"entities/#possible-configuration-values-for-entities-key","text":"key optional type default description entity False string None name of ha entity name True string None Used to override names icon True string None Used to override icons color True array None Overwrite color of entity color: [255, 0, 0] state True string None Only displayed if Entity state is equal to this value state_not True string None Only displayed if Entity state is unequal to this value status True string None Only valid for navigate items, adds a entity to track state for the icon","title":"Possible configuration values for entities key:"},{"location":"entities/#override-icons-or-names","text":"To overwrite Icons or Names of entities you can configure an icon and/or name in your configuration, please see the following example. Only the icons listed in the Icon Cheatsheet are useable. entities : - entity : light.test_item name : NameOverride icon : mdi:lightbulb It is also possible to configure different icon overwrites per state: icon : \"on\" : mdi:lightbulb \"off\" : mdi:lightbulb It is also possible to configure different color overwrites per state: color : \"on\" : [ 255 , 0 , 0 ] \"off\" : [ 0 , 0 , 255 ] It is also possible to use text instead of icons with text:X icon : \"on\" : mdi:lightbulb \"off\" : \"text:\"","title":"Override Icons or Names"},{"location":"entities/#hide-item-based-on-state","text":"This sensor will only be shown on the card if it's state is equal to off - entity : binary_sensor.sensor_bad_contact state : \"off\" This sensor will only be shown on the card if it's state is not equal to on - entity : binary_sensor.sensor_kueche_contact state_not : \"on\"","title":"Hide item based on state"},{"location":"faq/","text":"FAQ - Frequently Asked Questions \u00b6 Waiting for content - This is taking longer than usual on the screen \u00b6 You have most likely an error in your MQTT configuration somewhere. To find the error follow theese steps: Check your appdaemon log. (Settings > Add-ons > AppDaemon > Log) You should see something like this: INFO MQTT: MQTT Plugin initialization complete If you are seeing Messages like this: CRITICAL MQTT: Could not complete MQTT Plugin initialization, for Connection was refused due to Not Authorised Your appdaemon mqtt config is wrong, check your appdaemon.yaml. The log of your mqtt broker might give you additional information. Check MQTT Configuration of Tasmota. Your Tasmota device needs to connect sucessfully to your MQTT Broker, if you are in the waiting for content screen, the panel will send periodic messages to it's mqtt topic. Note that there is a minimum password length of 5 chars for the MQTT Connection in Tasmota. Make sure that you are using the same topic in apps.yaml and in your tasmota configuration. The examples in the docs ( MQTT Config ) are an valid example (tasmota<>apps.yaml). Please don't modify the Full Topic in your Tasmota Config, unless you know the implications, changing the Full Topic will result in diffent Send and Receive Channels, that have to be correct in your apps.yaml. If you are still in the waiting for content screen please share the following items, with the Waiting for Content Issue type on the Github Issues Page a screenshot of your tasmota mqtt configration (please censor your mqtt password) your appdaemon.yaml (please censor your mqtt password) your apps.yaml the appdaemon log, after restarting the container How to update \u00b6 Update AppDaemon Script \u00b6 HACS will show you that there is an update avalible and ask you to update. It is important to restart the AppDaemon Container afterwards. Update Display Firmware \u00b6 You should get an notification on the screen, asking you to update the firmware. In case you want to update manually you can use the following commands. EU Version: FlashNextion http://nspanel.pky.eu/lui-release.tft US Version Portrait: FlashNextion http://nspanel.pky.eu/lui-us-p-release.tft US Version Landscape: FlashNextion http://nspanel.pky.eu/lui-us-l-release.tft Update Tasmota Berry Driver \u00b6 You should get an notification on the screen, asking you to update the driver, if an update is needed. You can update the berry driver directly from the Tasmota Console with the following command. UpdateDriverVersion https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be How to upgrade from a release to the current development version \u00b6 Update App in HACS to main Click redownload in the menu of the app in HACS. Select main version. !!! Wait for it to load, dropdown needs to be selectable again, otherwise it will download the latest release !!! !!! Wait for it to load, dropdown needs to be selectable again, otherwise it will download the latest release !!! Click download. Restart AppDaemon Flash current Development Firmware in Tasmota Console. DO NOT USE THIS VERSION/URLS IF YOUR ARE NOT ON THE DEVELOPMENT VERSION EU VERSION: FlashNextion http://nspanel.pky.eu/lui.tft Development happens in the EU version, so it is possible that the US Version isn't up to date with the current development version of the EU firmware, the lastet US versions are still downloadable with the following links: US LANDSCAPE: FlashNextion http://nspanel.pky.eu/lui-us-l.tft US PORTRAIT: FlashNextion http://nspanel.pky.eu/lui-us-p.tft","title":"FAQ"},{"location":"faq/#faq-frequently-asked-questions","text":"","title":"FAQ - Frequently Asked Questions"},{"location":"faq/#waiting-for-content-this-is-taking-longer-than-usual-on-the-screen","text":"You have most likely an error in your MQTT configuration somewhere. To find the error follow theese steps: Check your appdaemon log. (Settings > Add-ons > AppDaemon > Log) You should see something like this: INFO MQTT: MQTT Plugin initialization complete If you are seeing Messages like this: CRITICAL MQTT: Could not complete MQTT Plugin initialization, for Connection was refused due to Not Authorised Your appdaemon mqtt config is wrong, check your appdaemon.yaml. The log of your mqtt broker might give you additional information. Check MQTT Configuration of Tasmota. Your Tasmota device needs to connect sucessfully to your MQTT Broker, if you are in the waiting for content screen, the panel will send periodic messages to it's mqtt topic. Note that there is a minimum password length of 5 chars for the MQTT Connection in Tasmota. Make sure that you are using the same topic in apps.yaml and in your tasmota configuration. The examples in the docs ( MQTT Config ) are an valid example (tasmota<>apps.yaml). Please don't modify the Full Topic in your Tasmota Config, unless you know the implications, changing the Full Topic will result in diffent Send and Receive Channels, that have to be correct in your apps.yaml. If you are still in the waiting for content screen please share the following items, with the Waiting for Content Issue type on the Github Issues Page a screenshot of your tasmota mqtt configration (please censor your mqtt password) your appdaemon.yaml (please censor your mqtt password) your apps.yaml the appdaemon log, after restarting the container","title":"Waiting for content - This is taking longer than usual on the screen"},{"location":"faq/#how-to-update","text":"","title":"How to update"},{"location":"faq/#update-appdaemon-script","text":"HACS will show you that there is an update avalible and ask you to update. It is important to restart the AppDaemon Container afterwards.","title":"Update AppDaemon Script"},{"location":"faq/#update-display-firmware","text":"You should get an notification on the screen, asking you to update the firmware. In case you want to update manually you can use the following commands. EU Version: FlashNextion http://nspanel.pky.eu/lui-release.tft US Version Portrait: FlashNextion http://nspanel.pky.eu/lui-us-p-release.tft US Version Landscape: FlashNextion http://nspanel.pky.eu/lui-us-l-release.tft","title":"Update Display Firmware"},{"location":"faq/#update-tasmota-berry-driver","text":"You should get an notification on the screen, asking you to update the driver, if an update is needed. You can update the berry driver directly from the Tasmota Console with the following command. UpdateDriverVersion https://raw.githubusercontent.com/joBr99/nspanel-lovelace-ui/main/tasmota/autoexec.be","title":"Update Tasmota Berry Driver"},{"location":"faq/#how-to-upgrade-from-a-release-to-the-current-development-version","text":"Update App in HACS to main Click redownload in the menu of the app in HACS. Select main version. !!! Wait for it to load, dropdown needs to be selectable again, otherwise it will download the latest release !!! !!! Wait for it to load, dropdown needs to be selectable again, otherwise it will download the latest release !!! Click download. Restart AppDaemon Flash current Development Firmware in Tasmota Console. DO NOT USE THIS VERSION/URLS IF YOUR ARE NOT ON THE DEVELOPMENT VERSION EU VERSION: FlashNextion http://nspanel.pky.eu/lui.tft Development happens in the EU version, so it is possible that the US Version isn't up to date with the current development version of the EU firmware, the lastet US versions are still downloadable with the following links: US LANDSCAPE: FlashNextion http://nspanel.pky.eu/lui-us-l.tft US PORTRAIT: FlashNextion http://nspanel.pky.eu/lui-us-p.tft","title":"How to upgrade from a release to the current development version"},{"location":"iobroker-install/","text":"Installation - ioBroker \u00b6 The Backend for ioBroker is maintained by britzelpuf and armilar https://forum.iobroker.net/topic/50888/sonoff-nspanel/612","title":"Prepare ioBroker"},{"location":"iobroker-install/#installation-iobroker","text":"The Backend for ioBroker is maintained by britzelpuf and armilar https://forum.iobroker.net/topic/50888/sonoff-nspanel/612","title":"Installation - ioBroker"},{"location":"notifications/","text":"Sending Notifications to the Panel \u00b6 There are two notification types, that can be triggered by sending a command over mqtt to the panel here are examples for homeassistant scripts: Seperate Page \u00b6 This is the notification used by the backend for updates, opening it requires to the following commands to the CustomSend Topic: pageType popupNotify entityUpdateDetail~internalName~heading~headingColor~button1text~button1color~button2text~tB2Color~notificationText~textColor~sleepTimeout It is possible to exit from the page by sending exitPopup Send Message to the Panel combined with a buzzer sound: nspanel_popup_notification: alias: Popup Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend pageType~popupNotify; CustomSend entityUpdateDetail~id~{{ title }}~65535~~~~~{{ message }}~65535~{{ timeout }}; Buzzer 2,2,2 mode: single icon: mdi:message-badge Send Message to the Panel: nspanel_popup_notification: alias: Popup Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend pageType~popupNotify; CustomSend entityUpdateDetail~id~{{ title }}~65535~~~~~{{ message }}~65535~{{ timeout }} mode: single icon: mdi:message-badge Notification on screensaver \u00b6 The screensaver can display Notifications by sending this command to the CustomSend topic: notify~heading~text Send Message to the Screensaver combined with a buzzer sound: nspanel_screensaver_notification: alias: Screensaver Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend notify~{{ heading }}~{{ message }}; Buzzer 2,2,2 mode: single icon: mdi:message-badge Send Message to the Screensaver: nspanel_screensaver_notification: alias: Screensaver Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend notify~{{ heading }}~{{ message }} mode: single icon: mdi:message-badge","title":"Notifications"},{"location":"notifications/#sending-notifications-to-the-panel","text":"There are two notification types, that can be triggered by sending a command over mqtt to the panel here are examples for homeassistant scripts:","title":"Sending Notifications to the Panel"},{"location":"notifications/#seperate-page","text":"This is the notification used by the backend for updates, opening it requires to the following commands to the CustomSend Topic: pageType popupNotify entityUpdateDetail~internalName~heading~headingColor~button1text~button1color~button2text~tB2Color~notificationText~textColor~sleepTimeout It is possible to exit from the page by sending exitPopup Send Message to the Panel combined with a buzzer sound: nspanel_popup_notification: alias: Popup Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend pageType~popupNotify; CustomSend entityUpdateDetail~id~{{ title }}~65535~~~~~{{ message }}~65535~{{ timeout }}; Buzzer 2,2,2 mode: single icon: mdi:message-badge Send Message to the Panel: nspanel_popup_notification: alias: Popup Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend pageType~popupNotify; CustomSend entityUpdateDetail~id~{{ title }}~65535~~~~~{{ message }}~65535~{{ timeout }} mode: single icon: mdi:message-badge","title":"Seperate Page"},{"location":"notifications/#notification-on-screensaver","text":"The screensaver can display Notifications by sending this command to the CustomSend topic: notify~heading~text Send Message to the Screensaver combined with a buzzer sound: nspanel_screensaver_notification: alias: Screensaver Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend notify~{{ heading }}~{{ message }}; Buzzer 2,2,2 mode: single icon: mdi:message-badge Send Message to the Screensaver: nspanel_screensaver_notification: alias: Screensaver Notification sequence: - service: mqtt.publish data: topic: cmnd/tasmota_NsPanelTerrasse/Backlog payload: CustomSend notify~{{ heading }}~{{ message }} mode: single icon: mdi:message-badge","title":"Notification on screensaver"},{"location":"phys-btn/","text":"Change behaviour of hardware buttons \u00b6 Tasmota Rules \u00b6 You can configure the buttons to mimic an UI element on the screen by configuring tasmota rules. The following rule will change the behaviour of the two buttons to do page navigation. Rule2 on Button1#state do Publish tele/%topic%/RESULT {\"CustomRecv\":\"event,buttonPress2,hwbtn,bPrev\"} endon on Button2#state do Publish tele/%topic%/RESULT {\"CustomRecv\":\"event,buttonPress2,hwbtn,bNext\"} endon Rule2 1 Decouple buttons from controlling power outputs \u00b6 If you do not want your NSPanel physical buttons to trigger the relays and prefer to have them as software configurable buttons, open the Tasmota console of your NSPanel and enter the following: SetOption73 1 Your relays will now appear as switches in HomeAssistant and you can control your buttons by using automations: You may reverse this change by entering the following in the Tasmota console of your NSPanel: SetOption73 0 Please note: Doing this will mean that if HomeAssistant is not working for any reason your buttons will not function correctly.","title":"Physical Buttons"},{"location":"phys-btn/#change-behaviour-of-hardware-buttons","text":"","title":"Change behaviour of hardware buttons"},{"location":"phys-btn/#tasmota-rules","text":"You can configure the buttons to mimic an UI element on the screen by configuring tasmota rules. The following rule will change the behaviour of the two buttons to do page navigation. Rule2 on Button1#state do Publish tele/%topic%/RESULT {\"CustomRecv\":\"event,buttonPress2,hwbtn,bPrev\"} endon on Button2#state do Publish tele/%topic%/RESULT {\"CustomRecv\":\"event,buttonPress2,hwbtn,bNext\"} endon Rule2 1","title":"Tasmota Rules"},{"location":"phys-btn/#decouple-buttons-from-controlling-power-outputs","text":"If you do not want your NSPanel physical buttons to trigger the relays and prefer to have them as software configurable buttons, open the Tasmota console of your NSPanel and enter the following: SetOption73 1 Your relays will now appear as switches in HomeAssistant and you can control your buttons by using automations: You may reverse this change by entering the following in the Tasmota console of your NSPanel: SetOption73 0 Please note: Doing this will mean that if HomeAssistant is not working for any reason your buttons will not function correctly.","title":"Decouple buttons from controlling power outputs"},{"location":"prepare_ha/","text":"Setup Home Assistant \u00b6 Installing AppDaemon \u00b6 The backend application for HomeAssistant is written in a python for AppDaemon . This means it requires a working and running installation of AppDaemon. The easiest way to install it is through Home Assistant's Supervisor Add-on Store, it will be automaticly connected to your Home Assistant Instance. Add babel package to AppDaemon Container (Optional) \u00b6 For localisation (date in your local language) you need to add the python package babel to your AppDaemon Installation. Installing Studio Code Server \u00b6 You will need a way to edit the apps.yaml config file in the Appdaemon folder. Install Studio Code Server from Home Assistant's Supervisor Add-on Store to easily edit configuration Files on your HomeAssistant Instance. Installing HomeAssistant Community Store \u00b6 HACS is the Home Assistant Community Store and allows for community integrations and automations to be updated easily from the Home Assistant web user interface. You will be notified of updates, and they can be installed by a click on a button. Installing Lovelace AppDaemon Backend Application \u00b6 To install Lovelace UI Backend App with HACS, you will need to make sure that you enabled AppDaemon automations in HACS, as these are not enabled by default: Click on Configuration on the left menu bar in Home Assistant Web UI Select Devices & Services Select Integrations Find HACS and click on Configure In the window that opens, make sure that Enable AppDaemon apps discovery & tracking is checked, or check it and click Submit If you just enabled this (or just installed HACS), you might have to wait a few minutes as all repositories are being fetched; you might hit a GitHub rate limit, which might then require you to wait a few hours for HACS to be fully configured. In this case, you won't be able to proceed to the next steps until HACS is ready. Now, to install NSPanel Lovelace UI Backend with HACS, follow these steps: Click on HACS on the left menu bar in Home Assistant Web UI Click on Automations in the right panel Click on Explore & download repositories in the bottom right corner Search for NSPanel , and click on NSPanel Lovelace UI Backend in the list that appears In the bottom right corner of the panel that appears, click on Download this repository with HACS A confirmation panel will appear, click on Download , and wait for HACS to proceed with the download The Backend Application is now installed, and HACS will inform you when updates are available","title":"Prepare Home Assistant"},{"location":"prepare_ha/#setup-home-assistant","text":"","title":"Setup Home Assistant"},{"location":"prepare_ha/#installing-appdaemon","text":"The backend application for HomeAssistant is written in a python for AppDaemon . This means it requires a working and running installation of AppDaemon. The easiest way to install it is through Home Assistant's Supervisor Add-on Store, it will be automaticly connected to your Home Assistant Instance.","title":"Installing AppDaemon"},{"location":"prepare_ha/#add-babel-package-to-appdaemon-container-optional","text":"For localisation (date in your local language) you need to add the python package babel to your AppDaemon Installation.","title":"Add babel package to AppDaemon Container (Optional)"},{"location":"prepare_ha/#installing-studio-code-server","text":"You will need a way to edit the apps.yaml config file in the Appdaemon folder. Install Studio Code Server from Home Assistant's Supervisor Add-on Store to easily edit configuration Files on your HomeAssistant Instance.","title":"Installing Studio Code Server"},{"location":"prepare_ha/#installing-homeassistant-community-store","text":"HACS is the Home Assistant Community Store and allows for community integrations and automations to be updated easily from the Home Assistant web user interface. You will be notified of updates, and they can be installed by a click on a button.","title":"Installing HomeAssistant Community Store"},{"location":"prepare_ha/#installing-lovelace-appdaemon-backend-application","text":"To install Lovelace UI Backend App with HACS, you will need to make sure that you enabled AppDaemon automations in HACS, as these are not enabled by default: Click on Configuration on the left menu bar in Home Assistant Web UI Select Devices & Services Select Integrations Find HACS and click on Configure In the window that opens, make sure that Enable AppDaemon apps discovery & tracking is checked, or check it and click Submit If you just enabled this (or just installed HACS), you might have to wait a few minutes as all repositories are being fetched; you might hit a GitHub rate limit, which might then require you to wait a few hours for HACS to be fully configured. In this case, you won't be able to proceed to the next steps until HACS is ready. Now, to install NSPanel Lovelace UI Backend with HACS, follow these steps: Click on HACS on the left menu bar in Home Assistant Web UI Click on Automations in the right panel Click on Explore & download repositories in the bottom right corner Search for NSPanel , and click on NSPanel Lovelace UI Backend in the list that appears In the bottom right corner of the panel that appears, click on Download this repository with HACS A confirmation panel will appear, click on Download , and wait for HACS to proceed with the download The Backend Application is now installed, and HACS will inform you when updates are available","title":"Installing Lovelace AppDaemon Backend Application"},{"location":"prepare_nspanel/","text":"Flash Tasmota to your NSPanel \u00b6 You need to connect to your nspanel via serial and flash tasmtoa tasmota32-nspanel.bin to your NSPanel. You can use the Tasmota Web Installer to do so. Tasmota Web Installer Checkout Blakadders Template Repo for more information on flashing, do not use the autoexec.be from this page. NSPanel Page of the Tasmota Template Repository If you prefer EspHome over Tasmota, you can use this thrid party esphome component, which is replacing tasmota and the berry driver of this project. ESPHome component Configure Tasmota Template for NSPanel \u00b6 Configure the NSPanel template for Tasmota. (Go to Configuration and Configure Other and paste the template there, make sure to tick the activate checkbox) You can use the following template or copy the one on the Tasmota Template Repo Site . {\"NAME\":\"NSPanel\",\"GPIO\":[0,0,0,0,3872,0,0,0,0,0,32,0,0,0,0,225,0,480,224,1,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4736,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"ADCParam 2,11200,10000,3950 | Sleep 0 | BuzzerPWM 1\"} After a reboot of tasmota your screen will light up with the stock display firmware. Upload Berry Driver to Tasmota \u00b6 Download the autoexec.be from the repository: Berry Driver Go to Consoles > Manage File System in Tasmota and upload the previously downloaded file. Restart your NSPanel Flash Firmware to Nextion Screen \u00b6 Due the limitations of Berry, it's not possible to download the tft file directly from github, so I'm also renting a small server where you can download the file via HTTP. Use the one following commands to flash the latest release from this repository, just execute the following Command in Tasmota: EU Version: FlashNextion http://nspanel.pky.eu/lui-release.tft US Version Portrait: FlashNextion http://nspanel.pky.eu/lui-us-p-release.tft US Version Landscape: FlashNextion http://nspanel.pky.eu/lui-us-l-release.tft Note: For the US Version Users - keepin mind that you need to add the model config option to your apps.yaml later, more details on config overview page Alternatively you can use your own webserver or the one build into HomeAssistant: Upload the nspanel.tft from the lastest release to a Webserver (for example www folder of Home Assistant) and execute the following command in Tasmota Console. (Development Version: [tft file from HMI folder](HMI/nspanel.tft)) **Webserver must be HTTP, HTTPS is not supported, due to limitations of berry lang on tasmota** `FlashNextion http://ip-address-of-your-homeassistant:8123/local/nspanel.tft`","title":"Prepare NsPanel"},{"location":"prepare_nspanel/#flash-tasmota-to-your-nspanel","text":"You need to connect to your nspanel via serial and flash tasmtoa tasmota32-nspanel.bin to your NSPanel. You can use the Tasmota Web Installer to do so. Tasmota Web Installer Checkout Blakadders Template Repo for more information on flashing, do not use the autoexec.be from this page. NSPanel Page of the Tasmota Template Repository If you prefer EspHome over Tasmota, you can use this thrid party esphome component, which is replacing tasmota and the berry driver of this project. ESPHome component","title":"Flash Tasmota to your NSPanel"},{"location":"prepare_nspanel/#configure-tasmota-template-for-nspanel","text":"Configure the NSPanel template for Tasmota. (Go to Configuration and Configure Other and paste the template there, make sure to tick the activate checkbox) You can use the following template or copy the one on the Tasmota Template Repo Site . {\"NAME\":\"NSPanel\",\"GPIO\":[0,0,0,0,3872,0,0,0,0,0,32,0,0,0,0,225,0,480,224,1,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4736,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"ADCParam 2,11200,10000,3950 | Sleep 0 | BuzzerPWM 1\"} After a reboot of tasmota your screen will light up with the stock display firmware.","title":"Configure Tasmota Template for NSPanel"},{"location":"prepare_nspanel/#upload-berry-driver-to-tasmota","text":"Download the autoexec.be from the repository: Berry Driver Go to Consoles > Manage File System in Tasmota and upload the previously downloaded file. Restart your NSPanel","title":"Upload Berry Driver to Tasmota"},{"location":"prepare_nspanel/#flash-firmware-to-nextion-screen","text":"Due the limitations of Berry, it's not possible to download the tft file directly from github, so I'm also renting a small server where you can download the file via HTTP. Use the one following commands to flash the latest release from this repository, just execute the following Command in Tasmota: EU Version: FlashNextion http://nspanel.pky.eu/lui-release.tft US Version Portrait: FlashNextion http://nspanel.pky.eu/lui-us-p-release.tft US Version Landscape: FlashNextion http://nspanel.pky.eu/lui-us-l-release.tft Note: For the US Version Users - keepin mind that you need to add the model config option to your apps.yaml later, more details on config overview page Alternatively you can use your own webserver or the one build into HomeAssistant: Upload the nspanel.tft from the lastest release to a Webserver (for example www folder of Home Assistant) and execute the following command in Tasmota Console. (Development Version: [tft file from HMI folder](HMI/nspanel.tft)) **Webserver must be HTTP, HTTPS is not supported, due to limitations of berry lang on tasmota** `FlashNextion http://ip-address-of-your-homeassistant:8123/local/nspanel.tft`","title":"Flash Firmware to Nextion Screen"},{"location":"prepare_nspanel2/","text":"Flash Tasmota to your NSPanel \u00b6 You need to connect to your nspanel via serial and flash tasmtoa tasmota32-nspanel.bin to your NSPanel. You can use the Tasmota Web Installer to do so. Tasmota Web Installer Checkout Blakadders Template Repo for more information on flashing, do not use the autoexec.be from this page. NSPanel Page of the Tasmota Template Repository Configure Tasmota Template for NSPanel \u00b6 Configure the NSPanel template for Tasmota. (Go to Configuration and Configure Other and paste the template there, make sure to tick the activate checkbox) You can use the following template or copy the one on the Tasmota Template Repo Site . {\"NAME\":\"NSPanel\",\"GPIO\":[0,0,0,0,3872,0,0,0,0,0,32,0,0,0,0,225,0,480,224,1,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4736,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"ADCParam 2,11200,10000,3950 | Sleep 0 | BuzzerPWM 1\"} After a reboot of tasmota your screen will light up with the stock display firmware. Upload Berry Driver to Tasmota \u00b6 Download the autoexec.be from the repository: Berry Driver Go to Consoles > Manage File System in Tasmota and upload the previously downloaded file. Restart your NSPanel Flash Firmware to Nextion Screen \u00b6 Due the limitations of Berry, it's not possible to download the tft file directly from github, so I'm also renting a small server where you can download the file via HTTP. Use the one following commands to flash the latest release from this repository, just execute the following Command in Tasmota: EU Version: FlashNextion http://nspanel.pky.eu/lui-release.tft US Version Portrait: FlashNextion http://nspanel.pky.eu/lui-us-p-release.tft US Version Landscape: FlashNextion http://nspanel.pky.eu/lui-us-l-release.tft Alternatively you can use your own webserver or the one build into HomeAssistant: Upload the nspanel.tft from the lastest release to a Webserver (for example www folder of Home Assistant) and execute the following command in Tasmota Console. (Development Version: [tft file from HMI folder](HMI/nspanel.tft)) **Webserver must be HTTP, HTTPS is not supported, due to limitations of berry lang on tasmota** `FlashNextion http://ip-address-of-your-homeassistant:8123/local/nspanel.tft`","title":"Prepare NsPanel"},{"location":"prepare_nspanel2/#flash-tasmota-to-your-nspanel","text":"You need to connect to your nspanel via serial and flash tasmtoa tasmota32-nspanel.bin to your NSPanel. You can use the Tasmota Web Installer to do so. Tasmota Web Installer Checkout Blakadders Template Repo for more information on flashing, do not use the autoexec.be from this page. NSPanel Page of the Tasmota Template Repository","title":"Flash Tasmota to your NSPanel"},{"location":"prepare_nspanel2/#configure-tasmota-template-for-nspanel","text":"Configure the NSPanel template for Tasmota. (Go to Configuration and Configure Other and paste the template there, make sure to tick the activate checkbox) You can use the following template or copy the one on the Tasmota Template Repo Site . {\"NAME\":\"NSPanel\",\"GPIO\":[0,0,0,0,3872,0,0,0,0,0,32,0,0,0,0,225,0,480,224,1,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4736,0],\"FLAG\":0,\"BASE\":1,\"CMND\":\"ADCParam 2,11200,10000,3950 | Sleep 0 | BuzzerPWM 1\"} After a reboot of tasmota your screen will light up with the stock display firmware.","title":"Configure Tasmota Template for NSPanel"},{"location":"prepare_nspanel2/#upload-berry-driver-to-tasmota","text":"Download the autoexec.be from the repository: Berry Driver Go to Consoles > Manage File System in Tasmota and upload the previously downloaded file. Restart your NSPanel","title":"Upload Berry Driver to Tasmota"},{"location":"prepare_nspanel2/#flash-firmware-to-nextion-screen","text":"Due the limitations of Berry, it's not possible to download the tft file directly from github, so I'm also renting a small server where you can download the file via HTTP. Use the one following commands to flash the latest release from this repository, just execute the following Command in Tasmota: EU Version: FlashNextion http://nspanel.pky.eu/lui-release.tft US Version Portrait: FlashNextion http://nspanel.pky.eu/lui-us-p-release.tft US Version Landscape: FlashNextion http://nspanel.pky.eu/lui-us-l-release.tft Alternatively you can use your own webserver or the one build into HomeAssistant: Upload the nspanel.tft from the lastest release to a Webserver (for example www folder of Home Assistant) and execute the following command in Tasmota Console. (Development Version: [tft file from HMI folder](HMI/nspanel.tft)) **Webserver must be HTTP, HTTPS is not supported, due to limitations of berry lang on tasmota** `FlashNextion http://ip-address-of-your-homeassistant:8123/local/nspanel.tft`","title":"Flash Firmware to Nextion Screen"},{"location":"subpages/","text":"Subpages \u00b6 You can configure entities with with the prefix navigate , that are navigating to cards, in case it's hidden card, the navigation items will change and the arrow is bringing you back to the privious page. - entity : navigate.cardGrid_testKey will allow you to navigate to a cardGrid page with the configured key testKey hiddenCards : - type : cardGrid title : Exmaple Grid entities : - entity : light.test_item key : testKey","title":"Subpages"},{"location":"subpages/#subpages","text":"You can configure entities with with the prefix navigate , that are navigating to cards, in case it's hidden card, the navigation items will change and the arrow is bringing you back to the privious page. - entity : navigate.cardGrid_testKey will allow you to navigate to a cardGrid page with the configured key testKey hiddenCards : - type : cardGrid title : Exmaple Grid entities : - entity : light.test_item key : testKey","title":"Subpages"}]}